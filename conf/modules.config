/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: GET_COMPARISONS {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: MASH_DIST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
        ]
    }

    withName: GET_CENTROID {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*.{txt}"
        ]
    }

    withName: ASSET_PREP {
        publishDir = [ enabled: false ]
    }

    withName: CLEAN_AND_CREATE_METADATA {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: RENAME_REF_IN_OUTPUT {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{_phylogeneticTree.newick,_snvMatrix.tsv,_cleaned_metadata.tsv}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

///////////////////////////////////////
//
// workflow: griphin
//
///////////////////////////////////////

process {

    withName: CREATE_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: GRIPHIN {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "*{_Summary.xlsx, _Summary.tsv}"
        ]
    }

    withName: COMBINE_GRIPHIN_SNVPHYL {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "SNVPhyl_GRiPHin_Summary.xlsx"
        ]
    }

     withName: REMOVE_FAILURES {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "*.{csv}"
        ]
    }

}


///////////////////////////////////////
//
// workflow: pipeline by st type
//
///////////////////////////////////////

process {

    withName: GET_SEQUENCE_TYPES {
        publishDir = [
            path: { "${params.outdir}/ST_SampleSheets" },
            mode: 'copy',
            pattern: "*_samplesheet.csv"
        ]
    }

    withName: MASH_DIST_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}" },
        ]
    }

    withName: GET_CENTROID_BY_ST {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*.{txt}"
        ]
    }

    withName: ASSET_PREP_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: SPLIT_METADATA_BY_ST {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{_metadata.tsv}"
        ]
    }

    withName: CLEAN_AND_CREATE_METADATA_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: RENAME_REF_IN_OUTPUT_BY_ST {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{_phylogeneticTree.newick,_snvMatrix.tsv,_cleaned_metadata.tsv}"
        ]
    }
}

///////////////////////////////////////
//
// workflow: snvphyl
//
///////////////////////////////////////

process {

    withName: CONVERT_INPUT {
        publishDir = [
            enabled: false,
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}/fastqc" },
            mode: 'copy',
            pattern: "*.{html,zip}"
        ]
    }

    withName: INDEXING {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*.{fai,sma,smi}"
        ]
    }

    withName: FIND_REPEATS {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "filterStats.txt"
        ]
    }

    withName: SMALT_MAP {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{.bam}"
        ]
    }

    withName: SORT_INDEX_BAMS {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_sorted.bam}"
        ]
    }

    withName: GENERATE_LINE_1 {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "bam_line.txt"
        ]
    }

    withName: VERIFYING_MAP_Q {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "mappingQuality.txt"
        ]
    }

    withName: FREEBAYES {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_freebayes.vcf}"
        ]
    }

    withName: FILTER_FREEBAYES {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_freebayes_filtered.vcf}"
        ]
    }

    withName: BGZIP_FREEBAYES_VCF {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_freebayes_filtered.vcf.gz}"
        ]
    }

    withName: FREEBAYES_VCF_TO_BCF {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_freebayes_filtered.bcf,_freebayes_filtered.bcf.csi}"
        ]
    }

    withName: MPILEUP {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_mpileup.vcf}"
        ]
    }

    withName: BGZIP_MPILEUP_VCF {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_mpileup.vcf.gz}"
        ]
    }

    withName: BCFTOOLS_CALL {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_mpileup.bcf}"
        ]
    }

    withName: CONSOLIDATE_BCFS {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_consolidated.bcf,_consolidated.vcf,_consolidated.bcf.csi,_filtered_density.txt}"
        ]
    }

    withName: CONSOLIDATE_FILTERED_DENSITY {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{_filtered_density_all.txt,_new_invalid_positions.bed}"
        ]
    }

    withName: GENERATE_LINE_2 {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "consolidation_line.txt"
        ]
    }

    withName: VCF2SNV_ALIGNMENT {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{.phy,.tsv}"
        ]
    }

    withName: FILTER_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "filterStats.txt"
        ]
    }

    withName: PHYML {
        publishDir = [
            path: { "${params.outdir}/${meta.seq_type}" },
            mode: 'copy',
            pattern: "*{_phylogeneticTreeStats.txt}"
        ]
    }

    withName: MAKE_SNV {
        publishDir = [enabled: false]
    }

}
