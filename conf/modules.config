/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

if (params.both==true) {
    directory = "All_ST"
} else {
    directory = "By_ST"
}


process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: GET_COMPARISONS {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: MASH_DIST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
        ]
    }

    withName: GET_CENTROID {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${directory}/centriod" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: ASSET_CHECK {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

///////////////////////////////////////
//
// workflow: griphin
//
///////////////////////////////////////

process {

    withName: CREATE_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: GRIPHIN {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "*.{xlsx}"
        ]
    }
}


///////////////////////////////////////
//
// workflow: pipeline by st type
//
///////////////////////////////////////

process {

    withName: GET_SEQUENCE_TYPES {
        publishDir = [
            path: { "${params.outdir}/${directory}/ST_SampleSheets" },
            mode: 'copy',
            pattern: "*.csv"
        ]
    }

    withName: MASH_DIST_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${directory}" },
        ]
    }

    withName: GET_CENTROID_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${directory}/centriod" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: ASSET_CHECK_BY_ST {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${directory}" },
            mode: 'copy',
            pattern: ""
        ]
    }

}

///////////////////////////////////////
//
// workflow: snvphyl
//
///////////////////////////////////////

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONVERT_INPUT {
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/${directory}" },
            mode: 'copy',
            pattern: ""
        ]
    }

    withName: VERIFYING_MAP_Q {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "mappingQuality.txt"
        ]
    }

    withName: CONSOLIDATE_BCFS {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "Log_File.txt"
        ]
    }

    withName: VCF2SNV_ALIGNMENT {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "{snvAlignment.phy, vcf2core.tsv, snvTable.tsv}"
        ]
    }

    withName: FILTER_STATS {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "filterStats.txt"
        ]
    }

    withName: PHYML {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "{phylogeneticTree.newick, phylogeneticTreeStats.txt}"
        ]
    }

    withName: MAKE_SNV {
        publishDir = [
            path: { "${params.outdir}/${directory}/${meta.seq_type}/${meta.id}" },
            mode: 'copy',
            pattern: "snvMatrix.tsv"
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

}
